---

- block:
    - name: clean_aws | Get the ELB info
      community.aws.elb_application_lb_info:
        access_key: "{{ cluster_vars[buildenv].aws_access_key }}"
        secret_key: "{{ cluster_vars[buildenv].aws_secret_key }}"
        session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
        region: "{{cluster_vars.region}}"
      register: r__elb_application_lb_info

    - debug: msg={{r__elb_application_lb_info}}

    - name: clean_aws | Delete the N/ELB
      elb_network_lb:
        access_key: "{{ cluster_vars[buildenv].aws_access_key }}"
        secret_key: "{{ cluster_vars[buildenv].aws_secret_key }}"
        session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
        region: "{{cluster_vars.region}}"
        name: "{{ item }}"
        state: absent
      with_items: "{{r__elb_application_lb_info | json_query(\"load_balancers[?starts_with(load_balancer_name, '\" + cluster_name + \"-')].load_balancer_name\")}}"

    - name: clean_aws | Delete the elb_target_groups
      elb_target_group:
        access_key: "{{ cluster_vars[buildenv].aws_access_key }}"
        secret_key: "{{ cluster_vars[buildenv].aws_secret_key }}"
        session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
        region: "{{cluster_vars.region}}"
        name: "{{item}}"
        state: absent
      with_items: "{{r__elb_application_lb_info | json_query(\"load_balancers[?starts_with(load_balancer_name, '\" + cluster_name + \"-')].listeners[].default_actions[].target_group_arn\") | map('regex_replace', '^.*?([^\/]+)\/[^\/]+\/?$', '\\1') }}"

    - block:
        - name: clean_aws | Gather info for pre-existing Hosted Zones (public and/or private)
          route53_info:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            query: hosted_zone
          register: r__route53_info__zones

        - name: clean_aws | Get CNAME records
          route53:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            state: "get"
            zone: "{{cluster_vars.dns_nameserver_zone}}"
            record: "{{loadbalancer.url}}"
            type: "CNAME"
            private_zone: "{{ item.Config.PrivateZone }}"
          register: r__route53_cname
          ignore_errors: yes
          with_items: "{{ r__route53_info__zones.HostedZones | json_query(\"[?Name==`\" + cluster_vars.dns_nameserver_zone + \".`]\") }}"

        - name: clean_aws | debug r__route53_cname
          debug: msg={{r__route53_cname}}

        - name: clean_aws | Delete CNAME records
          route53:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            state: "absent"
            zone: "{{ item.set.zone }}"
            record: "{{ item.set.record }}"
            type: "{{ item.set.type }}"
            ttl: "{{ item.set.ttl }}"
            value: ["{{ item.set.value }}"]
            private_zone: "{{ item.item.Config.PrivateZone }}"
          with_items: "{{ r__route53_cname.results }}"
          when: item.failed == false and item.resource_record_sets|length     # Note: when set is empty, it returns an empty list, rather than an empty dict as it should
      when: cluster_vars.dns_server == "route53"
